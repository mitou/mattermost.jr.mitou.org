apiVersion: apps/v1
kind: Deployment
metadata:
  name: mattermost
  namespace: mattermost
  labels:
    app: mattermost
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  replicas: 2
  selector:
    matchLabels:
      app: mattermost
  template:
    metadata:
      labels:
        app: mattermost
    spec:
      securityContext: 
        fsGroup: 2000
      serviceAccountName: mattermost-primary
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - mattermost
              topologyKey: topology.kubernetes.io/zone
      initContainers:
        - name: secret-placer
          image: busybox
          command: ["/bin/sh","-c"]
          args:
            - cp /secret/config.json /config/config.json
              && cp /license/mitoujr.mattermost-license /config/mitoujr.mattermost-license
              && chown 2000:2000 /config/*
          volumeMounts:
            - name: config
              mountPath: /config
            - name: secret
              mountPath: /secret
            - name: license
              mountPath: /license
      containers:
      - name: mattermost
        image: mattermost/mattermost-enterprise-edition:release-10.11
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        resources:
          limits:
            cpu: 1000m
            memory: 4Gi
            ephemeral-storage: 4096Mi
          requests:
            cpu: 1000m
            memory: 4Gi
            ephemeral-storage: 4096Mi
        readinessProbe:
          timeoutSeconds: 5
          periodSeconds: 5
          failureThreshold: 4
          httpGet:
            path: /api/v4/system/ping
            port: http
        livenessProbe:
          initialDelaySeconds: 600
          timeoutSeconds: 5
          periodSeconds: 15
          failureThreshold: 4
          httpGet:
            path:  /api/v4/system/ping
            port: http
        startupProbe:
          httpGet:
            path: /api/v4/system/ping
            port: http
          failureThreshold: 60
          periodSeconds: 10
        volumeMounts:
          - name: config
            mountPath: /mattermost/config/
          - name: bleve
            mountPath: /mattermost/bleve/
          - name: data
            mountPath: /mattermost/data/
          - name: index-status
            mountPath: /shared
      - name: bleve-indexer-sidecar
        image: busybox
        env:
          - name: MATTERMOST_TOKEN
            valueFrom:
              secretKeyRef:
                name: gcp-secret-env
                key: MATTERMOST_TOKEN
          - name: MATTERMOST_WAIT_MAX_RETRIES
            value: "60"
          - name: INDEX_WAIT_MAX_RETRIES
            value: "360"
          - name: RETRY_DELAY
            value: "10"
        resources:
          limits:
            cpu: 50m
            memory: 128Mi
            ephemeral-storage: 100Mi
          requests:
            cpu: 50m
            memory: 64Mi
            ephemeral-storage: 50Mi
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Starting bleve indexer sidecar..."
            
            # Wait for Mattermost to be ready
            max_retries=${MATTERMOST_WAIT_MAX_RETRIES:-60}
            retry_delay=${RETRY_DELAY:-10}
            retries=0
            result=1
            
            while [ $retries -lt $max_retries ] && [ $result -ne 0 ]; do
              retries=$((retries + 1))
              echo "Waiting for Mattermost... retry $retries/$max_retries"
              wget -q --spider --timeout=5 http://localhost:8000/api/v4/system/ping
              result=$?
              if [ $result -ne 0 ]; then
                echo "Mattermost not ready yet, retrying in ${retry_delay}s..."
                sleep $retry_delay
              fi
            done
            
            if [ $result -ne 0 ]; then
              echo "ERROR: Mattermost startup timeout after $((max_retries * retry_delay)) seconds"
              exit 1
            fi
            
            echo "Mattermost is ready, creating bleve index job..."
            
            # Create bleve indexing job
            response=$(wget -q -O- --timeout=30 \
              --header="Authorization: Bearer $MATTERMOST_TOKEN" \
              --header="Content-Type: application/json" \
              --post-data='{"type":"bleve_post_indexing"}' \
              http://localhost:8000/api/v4/jobs)
            
            if [ $? -ne 0 ]; then
              echo "ERROR: Failed to create job"
              exit 1
            elif ! echo "$response" | grep -q "bleve_post_indexing"; then
              echo "ERROR: Failed to create indexing job"
              echo "Response: $response"
              echo "HTTP Status: $(echo "$response" | head -n1)"
              exit 1
            fi
            
            echo "Bleve indexing job created, waiting for completion..."
            
            # Wait for job completion
            max_retries=${INDEX_WAIT_MAX_RETRIES:-360}
            retry_delay=${RETRY_DELAY:-10}
            retries=0
            result=""
            
            while [ $retries -lt $max_retries ] && [ "$result" = "" ]; do
              retries=$((retries + 1))
              echo "Checking index status... $retries/$max_retries (elapsed: $((retries * retry_delay))s)"
              response=$(wget -q -O- --timeout=30 \
                --header="Authorization: Bearer $MATTERMOST_TOKEN" \
                "http://localhost:8000/api/v4/jobs/type/bleve_post_indexing?page=0&per_page=1")
              
              if echo "$response" | grep -q "success"; then
                result="success"
                echo "Job status found: success"
              elif echo "$response" | grep -q "error"; then
                echo "ERROR: Indexing job failed"
                echo "Job response: $response"
                exit 1
              else
                echo "Job still in progress, checking again in ${retry_delay}s..."
                sleep $retry_delay
              fi
            done
            
            if [ "$result" = "" ]; then
              echo "ERROR: Index completion timeout after $((max_retries * retry_delay)) seconds"
              echo "Last response: $response"
              exit 1
            fi
            
            echo "Bleve indexing completed successfully!"
            touch /shared/bleve-index-complete
            
            # Keep container alive to prevent restart
            echo "Index complete, entering sleep mode..."
            sleep infinity
        volumeMounts:
          - name: index-status
            mountPath: /shared
        startupProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - test -f /shared/bleve-index-complete
          initialDelaySeconds: 10
          periodSeconds: 10
          failureThreshold: 180
      volumes:
        - name: data
          emptyDir: {}
        - name: config
          emptyDir: {}
        - name: bleve
          emptyDir:
            sizeLimit: 2Gi
        - name: secret
          secret:
            secretName: gcp-secret-config
        - name: license
          secret:
            secretName: gcp-secret-license
        - name: index-status
          emptyDir: {}
